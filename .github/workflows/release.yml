name: Release

on:
  push:
    tags:
      - 'v*'

# Ajout des permissions nécessaires pour créer des releases
permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: hottoh_api
            asset_name: hottoh_api-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: hottoh_api
            asset_name: hottoh_api-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: hottoh_api.exe
            asset_name: hottoh_api-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: hottoh_api
            asset_name: hottoh_api-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: hottoh_api
            asset_name: hottoh_api-macos-arm64

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu' }}

      - name: Prepare asset
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
            chmod +x ${{ matrix.asset_name }}
          fi

      - name: Upload asset to release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-upload
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate changelog
        id: changelog
        run: |
          echo "Generating changelog for tag ${{ github.ref_name }}"
          # You can customize this command to generate a changelog based on commits
          # For example, using git log
          echo "## Changelog for ${{ github.ref_name }}" > CHANGELOG.md
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"* %s" >> CHANGELOG.md
          cat CHANGELOG.md
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
